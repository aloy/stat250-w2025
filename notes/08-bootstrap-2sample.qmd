---
title: "The two-sample bootstrap"
subtitle: "Stat 250"
author: "[Click here for PDF version](pdfs/08-bootstrap-2sample.pdf)"
format:
  revealjs: 
    theme: [default, slide-styles.scss]
code-line-numbers: false
code-annotations: hover
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
options(scipen=1, digits=3)
library(mosaic)
library(tidyverse)
library(gt)
library(gtExtras)
library(kableExtra)
library(fontawesome)
```


## College score card
:::{style="font-size: 90%;"}
`r fa("quote-left")` The College Scorecard is designed to increase transparency, putting the power in the hands of the public — from those choosing colleges to those improving college quality — to see how well different schools are serving their students. 

Select variables:

- `type` — public/private
- `cost` — total cost of attendance
- `grad_rate` — proportion of students graduating within six years
- `region` — region of the U.S.
:::

## How does cost of attendance differ by inst. type?

```{r echo=FALSE, fig.height = 2.5, fig.width = 5.5, fig.align='center', warning=FALSE, out.width = "70%"}
college <- read.csv("http://aloy.rbind.io/data/scorecard_sample2019.csv")
gf_boxplot(cost ~ type, data = college, fill = ~type, alpha = 0.5) +
  scale_y_continuous(labels = scales::dollar) +
  coord_flip() +
  scale_fill_viridis_d() +
  theme_minimal() +
  labs(x = "Institution type", y = "Cost of attendance")
```


```{r echo=FALSE, results='asis'}
favstats(~cost | type, data = college) %>% 
  gt() |>
  fmt_number(decimals = 0) |>
  tab_options(table.font.size = 24)
```





## The two-sample bootstrap

1. Draw a resample of size *m* with replacement from the first sample and a separate resample of size *n* from the second sample. 

1. Compute a statistic that compares the two groups, such as the difference between the two sample means. 

1. Repeat the above steps many times, say 10,000. 

1. Construct the bootstrap distribution of the statistic. Inspect its spread, bias, and shape.



## `r fa("r-project")` implementation

```{r}
library(tidyverse) # for some data manipulation tools

N <- 10^4 # Number of bootstrap resamples

# Create a vector for each group
public <- college |> 
  filter(type == "public") |>  
  pull(cost) |> na.omit()
private <- college |>  
  filter(type == "private") |> 
  pull(cost) |> 
  na.omit()
```

## `r fa("r-project")` implementation

```{r}
# A place to store the statistics
diff_mean <- numeric(N)

# Resample and calculate the statistic
for (i in 1:N) {
  boot_public <- sample(public, replace = TRUE)
  boot_private <- sample(private, replace = TRUE)
  diff_mean[i] <- mean(boot_public) - mean(boot_private) 
}
```



## Bootstrap distribution

::::{.columns}
:::{.column width="60%"}
```{r fig.height = 3.5, fig.width = 5.6, echo=FALSE, out.width = "100%"}
gf_histogram(~diff_mean, color = "gray30", bins = 50, 
     title = "Bootstrap distribution", xlab = "Difference of means") +
  theme_classic() +
  scale_x_continuous(labels = scales::dollar)
```
:::

:::{.column width="40%"}
<br>

```{r echo=FALSE}
obs_means <- tapply(college$cost, INDEX = college$type, FUN = mean, na.rm = TRUE)

data.frame(
  Statistic = c("Mean", "SD", "Bias"),
  Value = c(mean(diff_mean), sd(diff_mean), mean(diff_mean) - (mean(obs_means[2]) - mean(obs_means[1])))
) |>
  gt() |>
  fmt_number(decimals = 2) |>
  tab_options(table.font.size = 36)
```

:::
::::

## 90% Percentile confidence interval

Calculation:

```{r}
quantile(diff_mean, probs = c(0.05, 0.95))
```



Interpretation:



# The bootstrap is flexible


## Ratio of means

```{r}
N <- 10^4

ratio_means <- numeric(N)
for (i in 1:N) {
  boot_public <- sample(public, replace = TRUE)
  boot_private <- sample(private, replace = TRUE)
  ratio_means[i] <- mean(boot_private) / mean(boot_public) 
}
```

```{r fig.height = 2.5, fig.width = 5, echo=FALSE}
gf_histogram(~ratio_means, color = "gray30", bins = 50, 
     title = "Bootstrap distribution", xlab = "Ratio of means") +
  theme_classic()
```



## Difference of medians

```{r}
N <- 10^4

diff_medians <- numeric(N)
for (i in 1:N) {
  boot_public <- sample(public, replace = TRUE)
  boot_private <- sample(private, replace = TRUE)
  diff_medians[i] <- median(boot_private) - median(boot_public)
}
```

```{r fig.height = 2.5, fig.width = 5, echo=FALSE}
gf_histogram(~diff_medians, color = "gray30", bins = 60,
     title = "Bootstrap distribution", xlab = "Difference of medians") +
  theme_classic()
```

<!-- ## Median -->

<!-- ```{r} -->
<!-- N <- 10^4 -->

<!-- medians <- numeric(N) -->
<!-- for (i in 1:N) { -->
<!--   medians[i] <- median(sample(private, replace = TRUE)) -->
<!-- } -->
<!-- ``` -->

<!-- ```{r fig.height = 2.5, fig.width = 5, echo=FALSE} -->
<!-- gf_histogram(~medians, color = "gray30", bins = 50,  -->
<!--      title = "Bootstrap distribution", xlab = "Sample median") + -->
<!--   theme_classic() -->
<!-- ``` -->


## Medians

```{r}
N <- 10^4

medians <- numeric(N)
for (i in 1:N) {
  medians[i] <- median(sample(private, replace = TRUE))
}
```

```{r fig.height = 2.5, fig.width = 5, echo=FALSE}
gf_histogram(~medians, color = "gray30", bins = 50,
     title = "Bootstrap distribution", xlab = "Sample median") +
  theme_classic()
```

## Cautions

- Bootstrap often provides a poor approximation to the sampling distribution of medians and other quantiles

-   When $|{\rm Bias} / {\rm Boot\ SE}| > 0.02$ there could be substantial impact on accuracy of confidence intervals, so reflect on setting and may need to consider other approaches to construct CIs

- Bootstrapping does not overcome the issue of small sample sizes




# Matched pairs

```{r}
#| include: false
library(readxl)
brake <- read_excel("../data/brake-reaction-time.xlsx")
```


##

### Is it safe to look at social media while driving?

:::{style="font-size: 80%;"}
- Previous research on smart phone use while driving has primarily focused on phone calls and texting. 

- Study looked at the effects of different smart phone tasks on car-following performance in a driving simulator. 

- Drivers performed driving only baseline simulation

- Drivers performed other phone tasks: texting, reading Facebook posts, exchanging photos on Snapchat, viewing updates on Instagram

- Brake reaction times (in seconds) recorded
:::

:::{.footer}
McNabb & Gray, “Staying Connected on the Road: A Comparison of Different Types of Smart Phone Use in a Driving Simulator,” *PLoS ONE*, 2016
:::


## Matched pairs

::::{.columns}
:::{.column width="50%"}
```{r echo=FALSE, results='asis'}
brt <- brake %>% select(Subject, Baseline, SnapChat) %>%
  mutate(Diff = SnapChat - Baseline)
  
brt %>%
  gt() %>%
  gt_highlight_cols(columns = 4, fill = "navy", alpha = 0.6, font_color = "white")
  # kable(format = "html", digits = 3) %>%
  # column_spec(4, background = "navy", color = "white", bold = TRUE) 
```
:::
:::{.column width="50%"}

<br>

- Two measurements on each case

- Goal is to estimate the true mean difference in reaction time

- Calculate differences, then it's a one-sample bootstrap
:::
::::


## Bootstrap percentile interval

```{r echo=FALSE, fig.height = 2.5, fig.width = 5.5, out.width = "70%", fig.align='center'}
N <- 1e4
n <- length(brt$Diff)
mean_diffs <- numeric(N)
set.seed(1112)
for(i in 1:N) {
  mean_diffs[i] <- mean(sample(brt$Diff, n, replace = TRUE))
}

quants <- quantile(mean_diffs, probs = c(0.045, 0.955))

gf_histogram(~mean_diffs, color = "gray30",
             xlab = "Mean differences", 
             title = "Bootstrap distribution",
             ylab = "Count") +
  geom_vline(xintercept = quants[1], 
             color = "darkorange") +
  geom_vline(xintercept = quants[2],
             color = "darkorange") +
  geom_label(aes(x = -0.095, y = 325), label = "5.5%", fill = "steelblue", color = "white") +
  geom_label(aes(x = 0.25, y = 325), label = "5.5%", fill = "steelblue", color = "white") +
  geom_label(aes(x = quants[1], y = 1000, label = round(quants[1], 3))) +
  geom_label(aes(x = quants[2], y = 1000, label = round(quants[2], 3))) +
  theme_minimal()
```

We are 89% confident that the mean difference in reaction times is between `r round(quants[1], 3)` and `r round(quants[2], 3)` seconds.


## `r fa("r-project")` implementation


```{r}
brake <- brake |> select(Subject, Baseline, SnapChat) |>
  mutate(Diff = SnapChat - Baseline)

N <- 1e4
n <- length(brake$Diff)
mean_diffs <- numeric(N)
set.seed(1112)

for(i in 1:N) {
  mean_diffs[i] <- mean(sample(brake$Diff, n, replace = TRUE))
}

quants <- quantile(mean_diffs, probs = c(0.045, 0.955))
```

